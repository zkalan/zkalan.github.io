<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>麻绳先生</title>
  
  <subtitle>做一些记录性的工作</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zkalan.com/"/>
  <updated>2019-11-04T11:31:06.285Z</updated>
  <id>http://zkalan.com/</id>
  
  <author>
    <name>Zhang Kai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装程序不支持配置安装通过usb或IEEE 1394端口链接的磁盘</title>
    <link href="http://zkalan.com/%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E4%B8%8D%E6%94%AF%E6%8C%81%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85%E9%80%9A%E8%BF%87usb%E6%88%96IEEE-1394%E7%AB%AF%E5%8F%A3%E9%93%BE%E6%8E%A5%E7%9A%84%E7%A3%81%E7%9B%98.html"/>
    <id>http://zkalan.com/安装程序不支持配置安装通过usb或IEEE-1394端口链接的磁盘.html</id>
    <published>2019-11-04T11:20:43.000Z</published>
    <updated>2019-11-04T11:31:06.285Z</updated>
    
    <content type="html"><![CDATA[<p>无意中得到一台外星人Alpha，不过并没有硬盘，于是拆了一个1T机械作为系统盘，这个机械硬盘只能通过USB的方式连接到电脑，所以也只能通过USB安装系统到硬盘，于是发生了上述错误“安装程序不支持配置安装通过usb或IEEE 1394端口链接的磁盘”，这个问题并没有找到太多解决办法，网上大多采用“windows to go”的解决办法，我试了一试，很方便，不过和安装介质有些关系，一开始的u盘总是出错，换成硬盘就好了。</p><p>参考链接：<a href="https://bbs.luobotou.org/thread-2427-1-1.html" target="_blank" rel="noopener">https://bbs.luobotou.org/thread-2427-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;无意中得到一台外星人Alpha，不过并没有硬盘，于是拆了一个1T机械作为系统盘，这个机械硬盘只能通过USB的方式连接到电脑，所以也只能通过USB安装系统到硬盘，于是发生了上述错误“安装程序不支持配置安装通过usb或IEEE 1394端口链接的磁盘”，这个问题并没有找到太多解
      
    
    </summary>
    
    
      <category term="杂项" scheme="http://zkalan.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="装系统" scheme="http://zkalan.com/tags/%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="windows to go" scheme="http://zkalan.com/tags/windows-to-go/"/>
    
  </entry>
  
  <entry>
    <title>spring整合junit</title>
    <link href="http://zkalan.com/spring%E6%95%B4%E5%90%88junit.html"/>
    <id>http://zkalan.com/spring整合junit.html</id>
    <published>2019-11-01T11:44:08.000Z</published>
    <updated>2019-11-01T12:09:52.306Z</updated>
    
    <content type="html"><![CDATA[<p>测试人员和开发人员关注的内容是不同的。例如junit测试人员并不会关注他将要测试的程序是否是由Spring框架搭建的，所以开发人员不应该期望测试程序能够存在对开发框架的依赖性代码。而Spring框架需要IOC核心容器，junit如何处理这个问题呢？</p><h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><ol><li>导入spring整合junit的jar文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用junit提供的一个注解@RunWith把原有的main方法替换，替换为spring提供的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContentConfiguration</span>(classes = SpringConfiguration.class)</span><br></pre></td></tr></table></figure><ol start="3"><li>告知spring运行器，spring和ioc创建是基于文件还是注解，并说明位置信息</li></ol><p><strong>@ContextConfiguration</strong></p><ul><li>locations：指定xml文件的位置，加上classpath关键字，表示在类路径下</li><li>classes：指定注解类所在位置</li></ul><p><del>当Spring版本为5.x版本时，要求junit版本不低于4.12</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试人员和开发人员关注的内容是不同的。例如junit测试人员并不会关注他将要测试的程序是否是由Spring框架搭建的，所以开发人员不应该期望测试程序能够存在对开发框架的依赖性代码。而Spring框架需要IOC核心容器，junit如何处理这个问题呢？&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://zkalan.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://zkalan.com/tags/spring/"/>
    
      <category term="junit" scheme="http://zkalan.com/tags/junit/"/>
    
  </entry>
  
  <entry>
    <title>spring中的注解二</title>
    <link href="http://zkalan.com/spring%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BA%8C.html"/>
    <id>http://zkalan.com/spring中的注解二.html</id>
    <published>2019-11-01T10:27:48.000Z</published>
    <updated>2019-11-01T11:40:43.846Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="http://www.zkalan.com/spring%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3.html" target="_blank" rel="noopener">前文中的注解</a>能够对自己实现的类进行处理，但是对第三方的类则无法处理，只能使用XML的方式，为了解决这个问题，有必要提出新的注解。</strong></p><p>创建一个新类，它是一个配置作用的类，作用与applicationcontent.xml一致。</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>作用：指定当前类是一个配置类<br>细节：当配置类作为AnnotationConfigApplicationContext对象创建时的参数时，该注解可以省略</p><h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>作用：用于通过注解指定spring在创建容器时需要扫描的包路径<br>属性：value，它和basePackages的作用一致，都是用于指定创建容器时扫描的包路径，它替代了xml配置文件中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zkalan"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.zkalan"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfigurtaion</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>作用：用于把当前方法的返回值作为bean对象存入到spring中的ioc容器中<br>属性：name，用于指定bean的id，当不写时，默认值是当前方法的名字<br>细节：当我们使用注解配置方法时，如果方法有参数，spring矿建回去容器中查找有没有可用的bean对象，查找方式和@AutoWired注解一样</p><p><strong>使用纯注解方式时，使用AnnotationConfigApplicationContext方法获取容器对象。</strong></p><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>设置bean对象的实现模式，例如singleton、prototype</p><h2 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h2><p>作用：用于导入其他的配置类<br>属性：value，用于指定其他配置类的字节码；有Import注解的类是父配置类，被import的是子配置类</p><h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:config.properties"</span>)</span><br></pre></td></tr></table></figure><p>在实际中，自己写的类使用注解更方便，第三方类使用XML配置更方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.zkalan.com/spring%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;前文中的注解&lt;/a&gt;能够对自己实现的
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://zkalan.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://zkalan.com/tags/spring/"/>
    
      <category term="注解" scheme="http://zkalan.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>spring中的注解</title>
    <link href="http://zkalan.com/spring%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3.html"/>
    <id>http://zkalan.com/spring中的注解.html</id>
    <published>2019-10-30T09:16:45.000Z</published>
    <updated>2019-11-01T03:15:37.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用于创建对象的注解"><a href="#用于创建对象的注解" class="headerlink" title="用于创建对象的注解"></a>用于创建对象的注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@component</span>(value=<span class="string">"accountService"</span>)</span><br><span class="line">puclic <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>作用：用于当前类对象存入spring容器中</li><li>属性value用于指定bean的id，默认为当前类名，并且首字母小写</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">content:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.package"</span>&gt;</span><span class="tag">&lt;/<span class="name">content:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller（表现层）、Service（业务层）、Repository（持久层）作用和属性与component完全一致，区分的意义在于使得三层对象更加清晰。</p><h3 id="用于注入数据的注解"><a href="#用于注入数据的注解" class="headerlink" title="用于注入数据的注解"></a>用于注入数据的注解</h3><p>@Autowired</p><ul><li>作用：自动按照类型注入。只要容器中有唯一的bean对象类型和要注入的变量类型匹配；可以是变量上注解，也可以是方法上；如果ioc容器中没有任何bean和要注入的类型匹配，则报错；如果ioc容器中有多个类型匹配时，变量名和某个bean的id匹配时也可注入成功；</li><li>在使用注解注入时，set方法是不必要的</li></ul><p>@Qualifier</p><ul><li>作用：在按照类型注入的基础上再按照名称注入，它在给类成员变量注入时不能单独使用，要和autowired组合；但是在给成员方法参数进行注入时可以单独使用；</li><li>属性value用于指定注入的bean的id</li></ul><p>@Resource</p><ul><li>作用：直接按照bean的id注入，可以单独使用</li><li>属性name用于指定bean的id<br>以上三个注解只能注入其他bean类型数据，而基本类型和String类型无法使用上述注解实现，另外，集合类型的注入只能通过xml来实现。</li></ul><p>@Value</p><ul><li>作用：用于注入基本数据类型和String类型的数据</li><li>属性value用于指定数据的值，它可以使用spring中的SpEL，也就是spring的el表达式，SpEL的写法：${表达式}</li></ul><h3 id="用于改变作用范围的注解"><a href="#用于改变作用范围的注解" class="headerlink" title="用于改变作用范围的注解"></a>用于改变作用范围的注解</h3><p>@Scope</p><ul><li>作用：用于指定bean的作用范围</li><li>属性value指定范围的取值，singleton、prototype</li></ul><h3 id="和生命周期有关的注解"><a href="#和生命周期有关的注解" class="headerlink" title="和生命周期有关的注解"></a>和生命周期有关的注解</h3><p>@PreDestroy：指定销毁方法<br>@PostConstruct：指定初始化方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用于创建对象的注解&quot;&gt;&lt;a href=&quot;#用于创建对象的注解&quot; class=&quot;headerlink&quot; title=&quot;用于创建对象的注解&quot;&gt;&lt;/a&gt;用于创建对象的注解&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://zkalan.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://zkalan.com/tags/spring/"/>
    
      <category term="注解" scheme="http://zkalan.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>spring中的依赖注入</title>
    <link href="http://zkalan.com/spring%E4%B8%AD%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html"/>
    <id>http://zkalan.com/spring中的依赖注入.html</id>
    <published>2019-10-30T07:22:34.000Z</published>
    <updated>2019-11-01T09:18:10.443Z</updated>
    
    <content type="html"><![CDATA[<p><strong>依赖注入Dependency Injection；IOC的作用：降低程序之间的耦合、依赖关系；依赖关系的管理都交给spring维护；在当前类中需要的其他类的对象，由spring提供，只需要在配置文件中说明；依赖关系的维护称之为依赖注入。</strong></p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>能够注入的数据有三类</p><ul><li>基本数据类型和String</li><li>其他bean类型（在配置文件或注解配置过的bean）</li><li>复杂类型/集合类型<br>注入的方式，三种</li><li>使用构造函数提供</li><li>使用set方法提供</li><li>使用注解提供</li></ul><h3 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h3><p>使用的标签：constructor-arg<br>标签出现的位置：bean标签的内部</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签中的属性：</p><ul><li>type：用于指定要注入的构造函数参数列表中数据的数据类型</li><li>index：用于指定要注入的数据在构造函数参数列表中的索引值，从零开始</li><li>name：指定构造函数中的形式参数名称</li><li>value：用于提供基本数据类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据，必须是在spring核心容器中出现过的bean对象</li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>在获取bean对象时，注入数据是必须的操作，否则无法创建对象</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>改变了bean对象的实例化方式，使我们在创建对象时必须提供指定的数据</p><h3 id="set方法注入-更常用"><a href="#set方法注入-更常用" class="headerlink" title="set方法注入(更常用)"></a>set方法注入(更常用)</h3><p>涉及的标签：property<br>出现的位置：bean标签内部<br>标签的属性</p><ul><li>name：用于指定注入时使用的set方法名字，改名字是set方法去掉set后余下的部分，并且首字母小写</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean数据类型，必须是在spring核心容器中出现过的bean对象<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h3><p>用于给list结构集合注入使用标签list、array、set，可通用；<br>用于给map结构集合注入使用标签map、props，可通用；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mystring"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myarray"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mymap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myprop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"a"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;依赖注入Dependency Injection；IOC的作用：降低程序之间的耦合、依赖关系；依赖关系的管理都交给spring维护；在当前类中需要的其他类的对象，由spring提供，只需要在配置文件中说明；依赖关系的维护称之为依赖注入。&lt;/strong&gt;&lt;/
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://zkalan.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://zkalan.com/tags/spring/"/>
    
      <category term="依赖注入" scheme="http://zkalan.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>bean的笔记</title>
    <link href="http://zkalan.com/bean%E7%9A%84%E7%AC%94%E8%AE%B0.html"/>
    <id>http://zkalan.com/bean的笔记.html</id>
    <published>2019-10-30T03:32:11.000Z</published>
    <updated>2019-10-30T04:21:21.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring对bean的管理细节"><a href="#spring对bean的管理细节" class="headerlink" title="spring对bean的管理细节"></a>spring对bean的管理细节</h2><h3 id="创建bean的三种方式"><a href="#创建bean的三种方式" class="headerlink" title="创建bean的三种方式"></a>创建bean的三种方式</h3><h4 id="使用默认构造函数创建"><a href="#使用默认构造函数创建" class="headerlink" title="使用默认构造函数创建"></a>使用默认构造函数创建</h4><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用的是默认构造函数创建对象，此时必须存在无参数构造函数；</p><h4 id="使用普通工厂中的方法创建对象，并存入spring容器"><a href="#使用普通工厂中的方法创建对象，并存入spring容器" class="headerlink" title="使用普通工厂中的方法创建对象，并存入spring容器"></a>使用普通工厂中的方法创建对象，并存入spring容器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用工厂中的静态方法创建对象"><a href="#使用工厂中的静态方法创建对象" class="headerlink" title="使用工厂中的静态方法创建对象"></a>使用工厂中的静态方法创建对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"staticgetAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="bean对象的作用范围"><a href="#bean对象的作用范围" class="headerlink" title="bean对象的作用范围"></a>bean对象的作用范围</h3><h4 id="bean标签的scope属性"><a href="#bean标签的scope属性" class="headerlink" title="bean标签的scope属性"></a>bean标签的scope属性</h4><ul><li>作用：用于指定bean的作用范围</li><li>取值：<ul><li>singleton：单例，默认值</li><li>prototype：多例</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群的会话范围</li></ul></li></ul><h3 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h3><ol><li>单例对象：容器创建时对象创建，声明周期和容器相同；</li><li>多例对象：使用时spring框架创建对象，对象回收由JVM负责；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring对bean的管理细节&quot;&gt;&lt;a href=&quot;#spring对bean的管理细节&quot; class=&quot;headerlink&quot; title=&quot;spring对bean的管理细节&quot;&gt;&lt;/a&gt;spring对bean的管理细节&lt;/h2&gt;&lt;h3 id=&quot;创建bean的三种
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://zkalan.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://zkalan.com/tags/spring/"/>
    
      <category term="bean" scheme="http://zkalan.com/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring的IOC概述</title>
    <link href="http://zkalan.com/Spring%E7%9A%84IOC%E6%A6%82%E8%BF%B0.html"/>
    <id>http://zkalan.com/Spring的IOC概述.html</id>
    <published>2019-10-29T09:18:55.000Z</published>
    <updated>2019-10-30T03:30:05.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过工厂模式"><a href="#通过工厂模式" class="headerlink" title="通过工厂模式"></a>通过工厂模式</h2><p>通过工厂模式，应用和资源得以分开，降低耦合。</p><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><p>把创建对象的权利交给框架或工厂，它包括依赖注入和依赖查找。</p><h2 id="spring基于XML的IOC环境搭建和入门"><a href="#spring基于XML的IOC环境搭建和入门" class="headerlink" title="spring基于XML的IOC环境搭建和入门"></a>spring基于XML的IOC环境搭建和入门</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取核心容器对象</span></span><br><span class="line">ApplicationContent ac = <span class="keyword">new</span> ClassPathXmlApplicationContent(<span class="string">"bena.xml"</span>);</span><br><span class="line"><span class="comment">//根据id获取Bean对象</span></span><br><span class="line">IAccountService as = (IAccountService)as.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">IAccountDao adao = ac.getBean(<span class="string">"accountDao"</span>, IAccountDao.class);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/beans/spring-beans.xsd&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;!--把对象的创建交给spring来管理--&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;bean id="</span><span class="attr">accountService</span>" <span class="attr">class</span>=<span class="string">"com.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="核心容器的两个接口"><a href="#核心容器的两个接口" class="headerlink" title="核心容器的两个接口"></a>核心容器的两个接口</h2><h3 id="ApplicationContent"><a href="#ApplicationContent" class="headerlink" title="ApplicationContent"></a>ApplicationContent</h3><p>在构建核心容器时，创建对象采用立即加载的方式；单例对象适用；</p><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>在构建核心容器时，创建对象采用延时加载的范式；多例对象适用；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过工厂模式&quot;&gt;&lt;a href=&quot;#通过工厂模式&quot; class=&quot;headerlink&quot; title=&quot;通过工厂模式&quot;&gt;&lt;/a&gt;通过工厂模式&lt;/h2&gt;&lt;p&gt;通过工厂模式，应用和资源得以分开，降低耦合。&lt;/p&gt;
&lt;h2 id=&quot;控制反转&quot;&gt;&lt;a href=&quot;#控制反
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://zkalan.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://zkalan.com/tags/spring/"/>
    
      <category term="IOC" scheme="http://zkalan.com/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>Spring概述</title>
    <link href="http://zkalan.com/Spring%E6%A6%82%E8%BF%B0.html"/>
    <id>http://zkalan.com/Spring概述.html</id>
    <published>2019-10-29T07:43:58.000Z</published>
    <updated>2019-10-29T09:17:58.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring是什么"><a href="#spring是什么" class="headerlink" title="spring是什么"></a>spring是什么</h2><p>spring是分层的JavaSE/EE应用全栈式轻量级开源框架，以IoC（Inverse Of Control反转控制）和AOP（Aspect Oriented Programming面向切面编程）为内核，提供了展现层Spring MVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多的著名第三方框架和类库，逐渐成为使用最多的JavaEE企业应用开源框架。</p><h2 id="spring两大核心"><a href="#spring两大核心" class="headerlink" title="spring两大核心"></a>spring两大核心</h2><p>IoC（Inverse Of Control反转控制）和AOP（Aspect Oriented Programming面向切面编程）</p><h2 id="spring发展历程和优势"><a href="#spring发展历程和优势" class="headerlink" title="spring发展历程和优势"></a>spring发展历程和优势</h2><ul><li>方便解耦，简化开发</li><li>AOP编程的支持</li><li>声明式事务编程</li><li>方便程序测试</li><li>方便集成各种优秀框架</li><li>降低Java API的使用难度<h2 id="spring体系结构"><a href="#spring体系结构" class="headerlink" title="spring体系结构"></a>spring体系结构</h2></li></ul><h2 id="程序的耦合"><a href="#程序的耦合" class="headerlink" title="程序的耦合"></a>程序的耦合</h2><ol><li>内容耦合：当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合，内容耦合是最高程度的耦合，应该避免使用。</li><li>公共耦合：两个或两个以上的模块共同引用一个全局数据项，这种耦合被称为公共耦合，在具有大量公共耦合的结构中，确定究竟是哪个模块给全局变量赋了一个特定的值是十分困难的。</li><li>外部耦合：一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。</li><li>控制耦合：一组模块通过接口向另一个模块传递一个控制信号，接收信号的模块根据信号值而进行适当的动作，这种耦合称为控制耦合。</li><li>标记耦合：若一个模块A通过接口向另外两个模块B和C传递一个公共参数，那么模块B和C之间存在标记耦合。</li><li>数据耦合：模块之间通过参数来传递数据，那么被称为数据耦合，数据耦合是最低的一种耦合形式。系统中一般都存在这种类型的耦合，因为为了完成一种有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。</li><li>非直接耦合：两个模块之间没有直接关系，他们之间的联系完全是通过主模块的控制和调用来实现的。<h2 id="解耦的思路"><a href="#解耦的思路" class="headerlink" title="解耦的思路"></a>解耦的思路</h2>第一步，应该采用反射来创建对象，避免使用new关键字；<br>第二步，通过读取配置文件来获取要创建的对象全限定类名；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure></li></ol><p><strong>计算机语言中，bean有可重用组件的意思。</strong></p><h3 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h3><p>巧妙的使用properties配置文件和反射机制，通过map存储beans，将该map声明为static就能实现单例模式，它的作用被称为容器container。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring是什么&quot;&gt;&lt;a href=&quot;#spring是什么&quot; class=&quot;headerlink&quot; title=&quot;spring是什么&quot;&gt;&lt;/a&gt;spring是什么&lt;/h2&gt;&lt;p&gt;spring是分层的JavaSE/EE应用全栈式轻量级开源框架，以IoC（Inver
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://zkalan.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="http://zkalan.com/tags/spring/"/>
    
      <category term="概述" scheme="http://zkalan.com/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>java笔记：包装类</title>
    <link href="http://zkalan.com/java%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8C%85%E8%A3%85%E7%B1%BB.html"/>
    <id>http://zkalan.com/java笔记：包装类.html</id>
    <published>2019-10-16T12:29:20.000Z</published>
    <updated>2019-10-16T12:34:05.675Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">基本数据类型</th><th align="left">包装类型</th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">java.lang.Byte</td></tr><tr><td align="left">short</td><td align="left">java.lang.Short</td></tr><tr><td align="left">int</td><td align="left">java.lang.Integer</td></tr><tr><td align="left">long</td><td align="left">java.lang.Long</td></tr><tr><td align="left">boolean</td><td align="left">java.lang.Boolean</td></tr><tr><td align="left">char</td><td align="left">java.lang.Character</td></tr><tr><td align="left">float</td><td align="left">java.lang.Float</td></tr><tr><td align="left">double</td><td align="left">java.lang.Double</td></tr></tbody></table><p>关于包装类的内容在新版java中有变化，最好查阅文档里哦阿姐情况。例如jdk5之后的自动装箱和自动拆箱，基本数据类型和包装类型自动转化。</p><p>还知道整形常量池（-128-127）和字符串常量池吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;基本数据类型&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;包装类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;byte&lt;/td&gt;
&lt;td align
      
    
    </summary>
    
    
      <category term="java笔记" scheme="http://zkalan.com/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://zkalan.com/tags/java/"/>
    
      <category term="常量池" scheme="http://zkalan.com/tags/%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
    
      <category term="包装类" scheme="http://zkalan.com/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>linux下脚本安装node+npm</title>
    <link href="http://zkalan.com/linux%E4%B8%8B%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85node-npm.html"/>
    <id>http://zkalan.com/linux下脚本安装node-npm.html</id>
    <published>2019-10-14T10:15:02.000Z</published>
    <updated>2019-10-16T12:34:41.146Z</updated>
    
    <content type="html"><![CDATA[<p>linux下通过包管理器很难安装最新版的node和npm，幸运的是，nodesource提供了多个shell脚本，方便用户简单的安装最新版node和npm。<br>官方github主页：<a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">https://github.com/nodesource/distributions</a><br>例如在ubuntu下安装Node.js v10.x版本，通过命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using Ubuntu</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using Debian, as root</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>简单方便，不能再完美。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux下通过包管理器很难安装最新版的node和npm，幸运的是，nodesource提供了多个shell脚本，方便用户简单的安装最新版node和npm。&lt;br&gt;官方github主页：&lt;a href=&quot;https://github.com/nodesource/distr
      
    
    </summary>
    
    
      <category term="脚本" scheme="http://zkalan.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="linux" scheme="http://zkalan.com/tags/linux/"/>
    
      <category term="脚本" scheme="http://zkalan.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="node" scheme="http://zkalan.com/tags/node/"/>
    
      <category term="npm" scheme="http://zkalan.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zkalan.com/hello-world.html"/>
    <id>http://zkalan.com/hello-world.html</id>
    <published>2019-10-14T09:24:09.629Z</published>
    <updated>2019-10-14T09:24:09.629Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
